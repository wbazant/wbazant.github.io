<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://127.0.0.1:53600/tag/java</id>
    <title>Wojtek</title>
    <updated>2019-09-21T21:32:34Z</updated>
    <link rel="self" href="http://127.0.0.1:53600/tag/java/1.html"/>
    <link rel="alternate" href="http://127.0.0.1:53600/tag/java"/>
    <generator version="2.000">Statocles</generator>

    <entry>
        <id>http://127.0.0.1:53600/posts/how-to-use-fewer-variables</id>
        <title>How to use fewer variables</title>
        <link rel="alternate" href="http://127.0.0.1:53600/posts/how-to-use-fewer-variables" />
        <content type="html"><![CDATA[
            <p>Using variables may benefit program readability, but many programmers regard it as a bit of a weak move (<a href="https://www.yegor256.com/2015/09/01/redundant-variables-are-evil.html">source: Yegor Bugayenko- programmer, blogger, and entrepreneur</a>). Giving stuff names is emphasised in beginner tutorials, and I expect many of my programming readers use variables a little bit too much, perhaps not realising it is merely a programming technique. I will explain the drawbacks of this technique, and give some alternatives, so that by eschewing it you might improve your craft further.</p>
            <p><a href="http://127.0.0.1:53600/posts/how-to-use-fewer-variables#section-2">Continue reading...</a></p>
        ]]></content>
        <updated>2018-09-26T00:00:00Z</updated>
    </entry>
    <entry>
        <id>http://127.0.0.1:53600/posts/a-lighter-closeable-iterator-from-expression-atlas</id>
        <title>A lighter closeable iterator from Expression Atlas</title>
        <link rel="alternate" href="http://127.0.0.1:53600/posts/a-lighter-closeable-iterator-from-expression-atlas" />
        <content type="html"><![CDATA[
            <p>The Atlas webapp code has <a href="https://github.com/gxa/atlas/blob/master/base/src/main/java/uk/ac/ebi/atlas/commons/streams/ObjectInputStream.java">this interface</a> :</p>

<pre><code>import java.io.Closeable;

public interface ObjectInputStream&lt;T&gt; extends Closeable {
    // returns null when stream is empty
    T readNext();
}
</code></pre>

<p>I thought it's so interesting that I wrote an entire blog post about it.</p>
            <p><a href="http://127.0.0.1:53600/posts/a-lighter-closeable-iterator-from-expression-atlas#section-2">Continue reading...</a></p>
        ]]></content>
        <updated>2017-01-10T00:00:00Z</updated>
    </entry>
</feed>
